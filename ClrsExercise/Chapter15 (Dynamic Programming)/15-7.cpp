/** 0-1背包问题和活动选择问题的结合.
将任务按照d域递增的顺序排列.
定义c(i, j)为任务1~k, 在时间j内的最大收益.
如果i的持续时间太长, 那么无法选择任务j, 有:
	c(i, j) = c(i-1, j)		if t[i] > j.
否则, 可以选择i, i的结束时间受到j和d[i]的限制, 因此, i的实际结束时间为
min(j, d[i]), 所以i在j中的开始时间为min(j, d[i]) - t[i] + 1. 因此:
	c(i, j) = max(
			c(i-1, j),			// discard job i.
			c(i-1, min(j, d[i])-t[i]+1) + p[i]
			)				if t[i] <= j.
上式之所以正确, 是因为任务按照d域递增的顺序排列, 也就是说, 在
min(j, d[i])-t[i]+1之后, 没有其它可用任务(如果任务i刚好在j结束, 那么命题成
立; 如果在d[i] < j处结束, 那么, i之前的任务的d值一定都不大于d[i], 所以在
d[i]之后, 不会再有合法的任务).
效率为: O(nlog(n) + n*d), d为max(i=1 to n)(d[i]).
如果n的值不大, 根据题意, d[i]的值在1~n之间, 可以用计数排序, 使排序过程的
效率为O(n), 使总体代价为O(nd).
*/

