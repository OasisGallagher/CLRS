/*
f(i)为字符i的频度; c(i)为i的编码的长度.
f(a) > f(b)
c(a) < c(b)
C = f(a) * c(a) + f(b) * c(b).
如果c(a) > c(b), 那么, 交换两者的编码, 使a编码为c(b)对应的编码, b编码为c(a)
对应的编码.
那么新的代价为:
C' = f(b) * c(a) + f(a) * c(b)
C - C' = (f(a) - f(b)) * c(a) + (f(b) - f(a)) * c(b)
       = (f(a) - f(b)) * c(a) - (f(a) - f(b)) * c(b)
	   = (f(a) - f(b)) * (c(a) - c(b)) 
	   > 0
所以, 如果c(a) > c(b), 那么, a编码为c(b)对应的编码, b编码为c(a)对应的编码
会得到更优的解.
所以, 对于频率递减的字符序列, 存在编码长度递增的最优前缀编码.
但是编码不一定是单调递减的, 可能编码长度相等, 也是最优前缀编码.
比如对于: 7 6 5 3
通过Huffman函数, 四个字符的编码长度都为2, 也是最优解.
*/
