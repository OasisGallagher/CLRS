// Φ(T) = 2num - size, for α ≥ 1/2.
// 如果第i个操作为DELETE, 那么, 
// c^i = ci + Φi - Φ(i-1)
//     = ci + 2(num-1) - size - (2num-size)
//     = ci - 2 = 1-2 = -1
// (平摊代价为负, 表示势能降低的值 > 实际的消耗, 即支付了x元为一个y的代价
// 操作支付, 其中x > y. 这种情况依然是合法的,
// sum(c^i, i = 0 ... n)依然是sum(ci, i = 0, ... n)的上界).
//
